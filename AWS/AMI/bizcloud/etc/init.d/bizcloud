#!/bin/bash

NUCLIAS_ROOT=~/bizcloud

# Source function library.
. /etc/rc.d/init.d/functions

export PATH=/usr/local/bin:$PATH
export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

setup() {
  (cd $NUCLIAS_ROOT/manager; ./setup.sh)
}

build() {  
  (cd $NUCLIAS_ROOT/manager/static; coffee i18n-import.coffee)
  (cd $NUCLIAS_ROOT/manager; ./build.sh)
}

migrate() {
  (cd $NUCLIAS_ROOT/manager/build/nodeapp; node tools/migration.js) 
}

build_static() {
  (cd $NUCLIAS_ROOT/manager/static; coffee i18n-import.coffee)
  (cd $NUCLIAS_ROOT/manager/static; grunt --force)
}

start_db() {
  service postgresql94 start
  service mysqld start
  (cd /root/dynamodb; java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb) >& /var/log/dynamodb.log &
  /redis-stable/src/redis-server >& /var/log/redis.log &
  (sleep 10; /redis-stable/src/redis-cli CONFIG SET protected-mode no)&
}

start_sim() {
  (cd $NUCLIAS_ROOT/manager/build/nodeapp; node ./tools/switchSimulator.js wss://localhost:8443) >& /var/log/switch-sim.log &
  (cd $NUCLIAS_ROOT/manager/build/nodeapp; node ./tools/simulator.js device.csv wss://localhost:8443) >& /var/log/sim.log &
}

start() {
  (cd $NUCLIAS_ROOT/manager/build/nodeapp; node ./build/js/staticWebServer.js) >& /var/log/frontend.log &
}

start_nodemon() {
  start_db
  (cd $NUCLIAS_ROOT/manager/build/nodeapp; export LOG4JS_CONFIG=`pwd`/build/log4js.json; nodemon -e js,html webserver.js) >& /var/log/nodeapp.log &
  start_sim
}

start_backend_dev() {
  (cd $NUCLIAS_ROOT/manager/build/nodeapp; ./dev-start.sh) >& /var/log/nodeapp.log &
}

start_backend() {
  (cd $NUCLIAS_ROOT/manager/build/nodeapp; node ./build/js/deviceAdapterServer-start.js) >& /var/log/da.log &
  (cd $NUCLIAS_ROOT/manager/build/nodeapp; node ./build/js/deviceEventManager-start.js) >& /var/log/dev.log &
  (cd $NUCLIAS_ROOT/manager/build/nodeapp; node ./build/js/timerDynamoJobs-start.js) >& /var/log/td.log &
  (cd $NUCLIAS_ROOT/manager/build/nodeapp; node ./build/js/timerjobs-start.js) >& /var/log/tj.log &
  (cd $NUCLIAS_ROOT; ./license-server/src/bin/www) >& /var/log/ls.log &
}

stop(){
  WEBSERVER_PIDS=`ps aux | grep webserver | awk '{ print $2 }'`
  kill -9 $WEBSERVER_PIDS
  WEBSERVER_PIDS=`ps aux | grep staticWebServer | awk '{ print $2 }'`
  kill -9 $WEBSERVER_PIDS
}

stop_db() {
  service postgresql94 stop
  service mysqld stop
  killall java
  killall redis-server
}

reload(){
  stop
  start
}

initdb(){
  createdb -h localhost -p 5432 -U postgres cloudmgr_test_db
  (cd $NUCLIAS_ROOT/manager/build/nodeapp; node tools/postgres/index.js)
  (cd $NUCLIAS_ROOT/manager/build/nodeapp; psql -h localhost -U postgres -d cloudmgr_test_db -a -f ./tools/postgres/sql/initData.sql)
  mysql < /root/cloudsrc/license-server/src/mysql/sql/create_database_and_user.sql
  mysql license < /root/cloudsrc/license-server/src/mysql/sql/license_schema_empty.sql
  mysql license < /root/cloudsrc/license-server/src/mysql/sql/license_procedure.sql
  mysql license < /root/cloudsrc/license-server/src/mysql/sql/license_schema_initial_data.sql
}

# See how we were called.
case "$1" in
  setup)
        setup
        ;;
  build)
        build
        ;;
  build_static)
  
        build_static
        ;;
  start_db)
        start_db
        ;;
  migrate)
        stop
        start_db
        migrate
        ;;
  start_sim)
        start_sim
        ;;
  start_backend_dev)
        start_backend_dev
        ;;
  start_backend)
        start_backend
        ;;
  start)
        start
        ;;
  stop)
        stop
        ;;
  status)
        status -p "$pidfile" postmaster
        script_result=$?
        ;;
  restart)
        restart
        ;;
  condrestart|try-restart)
        condrestart
        ;;
  reload)
        reload
        ;;
  force-reload)
        restart
        ;;
  initdb)
        initdb
        ;;
  *)
        echo $"Usage: $0 {start|start_backend|start_backend_dev|stop|status|restart|condrestart|try-restart|reload|force-reload|initdb|upgrade}"
        exit 2
esac